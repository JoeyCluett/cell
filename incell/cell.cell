
"--- Should be in standard library --";

fail =
{:(msg)
    failing_because_this_symbol_does_not_exist;
};

char_in =
{:(haystack, needle)
    ret = 0;
    for(chars_in(haystack),
    {:(h_ch)
        if(equals(needle, h_ch),
        {
            set("ret", 1);
        },
        {
        });
    });
    ret;
};


"--- Lexer ---";
"Call lex() once to make a lexer.";
"Then feed it one character at a time by calling it.";
"It will return None if it has not yet completed a token,";
"or a token (a list2()) if it has.";
"Make sure you call it once more after all characters, passing";
"None as the argument, so it can give you its last token.";
lex =
{
    {
        mode = None;
        part = None;

        end_tok =
        {
            if(equals(part, None),
            {
                None;
            },
            {
                p = part;
                m = mode;
                set("part", None);
                set("mode", None);
                list2(m, p);
            });
        };

        {:(char)
            if(equals(char, None),
            {
                print("char==None");
                r = end_tok();
                print(concat("r==", first(r)));
                r;
            },
            {
                if(char_in("(){}", char),
                {
                    print("char in (){}");
                    ret = end_tok();
                    set("part", None);
                    set("mode", char);
                    ret;
                },
                {
                    if(equals(mode, None),
                    {
                        print("mode==None");
                        set("mode", "symbol");
                        set("part", char);
                        None;
                    },
                    {
                        if(equals(mode, "symbol"),
                        {
                            print("mode==symbol");
                            set("part", concat(part, char));
                            None;
                        },
                        {
                            print(concat("mode=", mode));
                            unknown_mode;
                        });
                    });
                });
            });
        };
    }();
};

"--- Test Utils ---";

assert_that =
{:(obj, matcher)
    if(not(matcher("matches")(obj)),
    {
        fail(matcher("description"));
    },
    {
        "nothing";
    });
};

equals_m =
{:(expected)
    e = expected;
    a = None;
    {:(method)
        if(equals(method, "matches"),
        {
            {:(other)
                set("a", other);
                equals(e, other);
            };
        },
        {
            "Assume method is description";
            "TODO: allow concatenating strings!";
            a;
        });
    };
};


lists_equal =
{:(e, a)
    if(equals(e, None),
    {
        equals(a, None);
    },
    {
        if(equals(a, None),
        {
            print("a None, but e not.");
            0;
        },
        {
            if(equals(first(e), first(a)),
            {
                lists_equal(second(e), second(a));
            },
            {
                print("Firsts not equal");
                print(first(e));
                print(first(a));
                0;
            });
        });
    });
};

lists_equal_m =
{:(expected)
    e = expected;
    a = None;
    {:(method)
        if(equals(method, "matches"),
        {
            {:(other)
                set("a", other);
                lists_equal(e, a);
            };
        },
        {
            "Assume method is description";
            "TODO: allow concatenating strings!";
            a;
        });
    };
};

test =
{:(name, cod)
    print(name);
    cod();
};

skiptest =
{:(name, code)
    print("SKIPPING:");
    print(name);
};

"--- Lexer tests --";

lexed =
{:(str)
    lexer = lex();
    ret = list0();
    handle_token =
        {:(t)
            if(not(equals(t, None)),
            {
                set("ret", append(ret, t));
            },
            {
            });
        };
    for(chars_in(str),
    {:(ch)
        handle_token(lexer(ch));
    });
    handle_token(lexer(None));
    ret;
};



test("Empty file produces nothing",
{
    assert_that(lexed(""), equals_m(list0()));
});

test("Open bracket produces open bracket token",
{
    l = lexed("(");
    assert_that(first(l), lists_equal_m(list2("(", "")));
    assert_that(second(l), equals_m(None));
});

test("Close bracket produces close bracket token",
{
    l = lexed(")");
    assert_that(first(l), lists_equal_m(list2(")", "")));
    assert_that(second(l), equals_m(None));
});

test("Open brace produces open brace token",
{
    l = lexed("{");
    assert_that(first(l), lists_equal_m(list2("{", "")));
    assert_that(second(l), equals_m(None));
});

test("Close brace produces close brace token",
{
    l = lexed("}");
    assert_that(first(l), lists_equal_m(list2("}", "")));
    assert_that(second(l), equals_m(None));
});

test("Multiple brackets become multiple tokens",
{
    l = lexed("()");
    assert_that(first(l),         lists_equal_m(list2("(", "")));
    assert_that(first(second(l)), lists_equal_m(list2(")", "")));
    assert_that(second(second(l)), equals_m(None));
});

test("Single letter becomes a symbol token",
{
    l = lexed("a");
    assert_that(first(l), lists_equal_m(list2("symbol", "a")));
    assert_that(second(l), equals_m(None));
});

test("Multiple letters become a symbol token",
{
    l = lexed("foo");
    assert_that(first(l), lists_equal_m(list2("symbol", "foo")));
    assert_that(second(l), equals_m(None));
});


test("Symbol followed by a bracket becomes two tokens",
{
    l = lexed("foo(");
    assert_that(first(l), lists_equal_m(list2("symbol", "foo")));
    assert_that(first(second(l)), lists_equal_m(list2("(", "")));
    assert_that(second(second(l)), equals_m(None));
});
